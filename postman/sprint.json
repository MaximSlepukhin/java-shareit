{
	"info": {
		"_postman_id": "5f9d5a92-2a94-4aa9-b742-d0b82c36f658",
		"name": "Sprint 16 ShareIt Rework 07.24",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23073145",
		"_collection_link": "https://universal-shadow-295426.postman.co/workspace/My-Workspace~4200f6aa-0504-44b1-8a1d-707d0dcbd5ce/collection/13708500-5f9d5a92-2a94-4aa9-b742-d0b82c36f658?action=share&source=collection_link&creator=23073145"
	},
	"item": [
		{
			"name": "Item",
			"item": [
				{
					"name": "Create Item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"var item = pm.collectionVariables.get(\"item\");\r",
									"\r",
									"pm.test(\"Response data equal to request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('available');\r",
									"    pm.expect(jsonData.name, `\"name\" must be ${item.name}`).to.eql(item.name);\r",
									"    pm.expect(jsonData.description, `\"description\" must be ${item.description}`).to.eql(item.description);\r",
									"    pm.expect(jsonData.available.toString(), `\"available\" must be ${item.available}`).to.eql(item.available.toString());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item on request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        var request = await api.addRequest(rnd.getRequest(), user1.id);\r",
									"        pm.collectionVariables.set(\"requestId\", request.id);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"var item = pm.collectionVariables.get(\"item\");\r",
									"\r",
									"pm.test(\"Response data equal to request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('available');\r",
									"    pm.expect(jsonData.name, `\"name\" must be ${item.name}`).to.eql(item.name);\r",
									"    pm.expect(jsonData.description, `\"description\" must be ${item.description}`).to.eql(item.description);\r",
									"    pm.expect(jsonData.available.toString(), `\"available\" must be ${item.available}`).to.eql(item.available.toString());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}},\n    \"requestId\": {{requestId}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item without name on request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        var request = await api.addRequest(rnd.getRequest(), user1.id);\r",
									"        pm.collectionVariables.set(\"requestId\", request.id);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response data have error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{itemDescription}}\",\n    \"available\": {{itemAvailable}},\n    \"requestId\": {{requestId}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item without description on request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        var request = await api.addRequest(rnd.getRequest(), user1.id);\r",
									"        pm.collectionVariables.set(\"requestId\", request.id);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response data have error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"available\": {{itemAvailable}},\n    \"requestId\": {{requestId}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item without available on request Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        var request = await api.addRequest(rnd.getRequest(), user1.id);\r",
									"        pm.collectionVariables.set(\"requestId\", request.id);\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"\r",
									"        item = rnd.getItem();\r",
									"        pm.collectionVariables.set(\"item\", item);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"        pm.collectionVariables.set(\"itemAvailable\", item.available);\r",
									"        pm.collectionVariables.set(\"itemDescription\", item.description);\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response data have error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"description\": \"{{itemDescription}}\",\n    \"requestId\": {{requestId}}\n}"
						},
						"url": {
							"raw": "localhost:8080/items",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "requests",
			"item": [
				{
					"name": "Create request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        request1 = rnd.getRequest();\r",
									"        pm.collectionVariables.set(\"requestDescription\", request1.description);\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response data equal to request\", function () {\r",
									"    var description = pm.collectionVariables.get(\"requestDescription\");\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('created');\r",
									"    pm.expect(jsonData.description, `\"description\" must be ${description}`).to.eql(description);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{    \n    \"description\": \"{{requestDescription}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/requests",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  user requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        request1 = await api.addRequest(rnd.getRequest(), user.id);\r",
									"        request2 = await api.addRequest(rnd.getRequest(), user.id);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"User requests amount\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"url": {
							"raw": "localhost:8080/requests",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  user request by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user1 = await api.addUser(rnd.getUser());\r",
									"        user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        req = await api.addRequest(rnd.getRequest(), user1.id);\r",
									"        pm.collectionVariables.set(\"requestId\", req.id);\r",
									"        item = await api.addItem(rnd.getItemForRequest(req.id), user2.id);\r",
									"        pm.collectionVariables.set(\"itemName\", item.name);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"User requests amount\", function () {\r",
									"    var name = pm.collectionVariables.get(\"itemName\");\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('description');\r",
									"    pm.expect(jsonData).to.have.property('created');\r",
									"    pm.expect(jsonData).to.have.property('items');\r",
									"    pm.expect(jsonData.items[0].name, `\"item name\" must be ${name}`).to.eql(name);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Sharer-User-Id",
								"value": "{{userId}}"
							}
						],
						"url": {
							"raw": "localhost:8080/requests/{{requestId}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"requests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"        pm.collectionVariables.set(\"userName\", user.name);\r",
									"        pm.collectionVariables.set(\"userEmail\", user.email);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Response have body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{userName}}\",\n    \"email\": \"{{userEmail}}\"\n}"
						},
						"url": {
							"raw": "localhost:8080/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, id=0, verbose=null) {\r",
					"        return this.post(\"/users\", user, id, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addItem(item, id=0, verbose=null) {\r",
					"        return this.post(\"/items\", item, id, \"Ошибка при добавлении новой вещи: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addRequest(request, id=0, verbose=null) {\r",
					"        console.log(id);\r",
					"        return this.post(\"/requests\", request, id, \"Ошибка при добавлении нового запроса: \", verbose);\r",
					"    }\r",
					"    \r",
					"    async post(path, body, id=0, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, id=0, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, id=0, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async put(path, body = null, id=0, errorText = \"Ошибка при выполнении put-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PUT\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async delete(path, body = null, id=0, errorText = \"Ошибка при выполнении delte-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"DELETE\", path, body, id, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async sendRequest(method, path, body=null, id=0, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            var req = {};\r",
					"            console.log(id == 0);\r",
					"            if (id == 0){\r",
					"                req = {\r",
					"                    url: this.baseUrl + path,\r",
					"                    method: method,\r",
					"                    body: body == null ? \"\" : JSON.stringify(body),\r",
					"                    header: { \"Content-Type\": \"application/json\"},\r",
					"                };\r",
					"            }else{\r",
					"                req = {\r",
					"                    url: this.baseUrl + path,\r",
					"                    method: method,\r",
					"                    body: body == null ? \"\" : JSON.stringify(body),\r",
					"                    header: [{\r",
					"                        \"key\": \"X-Sharer-User-Id\",\r",
					"                        \"value\": id,\r",
					"                        \"type\": \"text\",\r",
					"                    },\r",
					"                    {\r",
					"                        \"key\": \"Content-Type\",\r",
					"                        \"name\": \"Content-Type\",\r",
					"                        \"value\": \"application/json\",\r",
					"                        \"type\": \"text\"\r",
					"                    }]\r",
					"                };\r",
					"            }\r",
					"            console.log(req);\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", req);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(req, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошибка.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        resolve(null);\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getRequest() {\r",
					"        return {\r",
					"            description: this.getWord(50)\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getItem() {\r",
					"        return {\r",
					"            name: this.getWord(10),\r",
					"            description: this.getWord(50),\r",
					"            available: pm.variables.replaceIn('{{$randomBoolean}}')\t\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getItemForRequest(id) {\r",
					"        return {\r",
					"            name: this.getWord(10),\r",
					"            description: this.getWord(50),\r",
					"            available: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            requestId: id\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getFilm(director=null) {\r",
					"        let date = new Date(new Date(1960, 0, 1).getTime() + Math.random() * (new Date(2010, 0, 1).getTime() - new Date(1960, 0, 1).getTime()));\r",
					"        var toReturn = {\r",
					"            name: this.getWord(15),\r",
					"            description: this.getWord(50),\r",
					"            releaseDate: date.toISOString().slice(0,10),\r",
					"            duration: Math.floor(Math.random() * (180 - 60 + 1) + 60),\r",
					"            mpa: { id: Math.floor(Math.random() * (5 - 1 + 1) + 1)},\r",
					"            genres: [{ id: Math.floor(Math.random() * (6 - 1 + 1) + 1)}]\r",
					"        };\r",
					"        if (director!==null)\r",
					"            toReturn.directors = [{ id: director.id}];\r",
					"        return toReturn;\r",
					"    }\r",
					"\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"\r",
					"        getName(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userId",
			"value": "1"
		},
		{
			"key": "itemName",
			"value": ""
		},
		{
			"key": "itemAvailable",
			"value": ""
		},
		{
			"key": "itemDescription",
			"value": ""
		},
		{
			"key": "item",
			"value": ""
		},
		{
			"key": "requestId",
			"value": ""
		},
		{
			"key": "requestDescription",
			"value": ""
		}
	]
}
